{
  "id": "1751028167264_hgmuztj2i",
  "name": "New AI Thread",
  "created": "2025-06-27T12:42:47.264Z",
  "messages": [
    {
      "type": "user",
      "content": "give code for radix sort and explain",
      "model": "gemini",
      "timestamp": "2025-06-27T12:44:08.118Z",
      "id": "1751028248118_ruoletx19"
    },
    {
      "type": "assistant",
      "content": "Radix sort is a non-comparative integer sorting algorithm that sorts data with integer keys by grouping keys by individual digits which share the same significant position and value. It's often used for sorting numbers or strings, especially when the range of key values is large.\n\nHere's a Python implementation of Radix Sort along with an explanation:\n\n```python\ndef counting_sort_by_digit(arr, exp):\n    \"\"\"\n    A stable sort (counting sort) that sorts the input array 'arr'\n    based on the digit represented by 'exp' (e.g., 1 for units place,\n    10 for tens place, 100 for hundreds place, etc.).\n    \"\"\"\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10  # For digits 0-9\n\n    # Store count of occurrences in count[]\n    for i in range(n):\n        index = (arr[i] // exp) % 10\n        count[index] += 1\n\n    # Change count[i] so that count[i] now contains actual\n    # position of this digit in output[]\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n\n    # Build the output array\n    # Iterate from the end to maintain stability\n    i = n - 1\n    while i >= 0:\n        index = (arr[i] // exp) % 10\n        output[count[index] - 1] = arr[i]\n        count[index] -= 1\n        i -= 1\n\n    # Copy the output array to arr[], so that arr[] now\n    # contains sorted numbers according to current digit\n    for i in range(n):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    \"\"\"\n    Implements Radix Sort to sort the input array 'arr'.\n    Assumes all numbers are non-negative.\n    \"\"\"\n    if not arr:\n        return\n\n    # Find the maximum number to know number of digits\n    max_val = max(arr)\n\n    # Do counting sort for every digit. Note that instead\n    # of passing digit number, exp is passed. exp is 10^i\n    # where i is current digit number\n    exp = 1\n    while max_val // exp > 0:\n        counting_sort_by_digit(arr, exp)\n        exp *= 10\n\n# Example Usage:\nif __name__ == \"__main__\":\n    my_list = [170, 45, 75, 90, 802, 24, 2, 66]\n    print(\"Original list:\", my_list)\n    radix_sort(my_list)\n    print(\"Sorted list (Radix Sort):\", my_list)\n\n    my_list_2 = [329, 457, 657, 839, 436, 720, 355]\n    print(\"Original list 2:\", my_list_2)\n    radix_sort(my_list_2)\n    print(\"Sorted list 2 (Radix Sort):\", my_list_2)\n\n    my_list_3 = [1, 5, 2, 8, 3, 9, 4, 7, 6, 0]\n    print(\"Original list 3:\", my_list_3)\n    radix_sort(my_list_3)\n    print(\"Sorted list 3 (Radix Sort):\", my_list_3)\n```\n\n### Explanation of Radix Sort:\n\n1.  **Core Idea:** Radix sort works by processing digits from the least significant digit (LSD) to the most significant digit (MSD) or vice-versa. The most common approach, and the one implemented above, is LSD Radix Sort.\n\n2.  **`radix_",
      "model": "gemini",
      "timestamp": "2025-06-27T12:44:42.231Z",
      "id": "1751028282231_g7ta7jajn"
    }
  ]
}